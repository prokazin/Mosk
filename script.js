vkBridge.send('VKWebAppInit');

let score = parseInt(localStorage.getItem('score')) || 0;
let perClick = parseInt(localStorage.getItem('perClick')) || 1;
let perSecond = parseInt(localStorage.getItem('perSecond')) || 0;
let lastWearCheck = parseInt(localStorage.getItem('lastWearCheck')) || 0;

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ localStorage (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {name, score})
let leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];

const scoreElement = document.getElementById('score');
const perSecondElement = document.getElementById('perSecond');
const clickBtn = document.getElementById('clickBtn');

const upgrade1Btn = document.getElementById('upgrade1');
const upgrade2Btn = document.getElementById('upgrade2');
const upgrade3Btn = document.getElementById('upgrade3');

const fixClutchBtn = document.getElementById('fixClutch');
const addCoolantBtn = document.getElementById('addCoolant');
const tuneJetsBtn = document.getElementById('tuneJets');

const notification = document.getElementById('notification');
const leaderList = document.getElementById('leaderList');
let notificationTimeout;

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–ª–∞–≤–Ω—ã–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º
function showNotification(text) {
  clearTimeout(notificationTimeout);
  notification.textContent = text;
  notification.classList.add('show');
  notificationTimeout = setTimeout(() => {
    notification.classList.remove('show');
  }, 3500);
}

function updateUI() {
  scoreElement.textContent = Math.floor(score);
  perSecondElement.textContent = perSecond;
  upgrade1Btn.disabled = score < 10;
  upgrade2Btn.disabled = score < 50;
  upgrade3Btn.disabled = score < 200;

  fixClutchBtn.disabled = score < 100;
  addCoolantBtn.disabled = score < 150;
  tuneJetsBtn.disabled = score < 200;
}

function saveProgress() {
  localStorage.setItem('score', score);
  localStorage.setItem('perClick', perClick);
  localStorage.setItem('perSecond', perSecond);
  localStorage.setItem('lastWearCheck', lastWearCheck);
  localStorage.setItem('leaderboard', JSON.stringify(leaderboard));
}

// –ò–∑–Ω–æ—Å —Å—Ü–µ–ø–ª–µ–Ω–∏—è: —á–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–≥, —Ç–µ–º —Ä–µ–∂–µ –∏–∑–Ω–æ—Å
function checkWear() {
  const wearThreshold = 500 + Math.floor(score / 1000) * 500;

  if (score - lastWearCheck >= wearThreshold) {
    lastWearCheck = score;
    perClick = Math.max(1, perClick - 1);
    perSecond = Math.max(0, perSecond - 2);
    showNotification("‚öôÔ∏è –ò–∑–Ω–æ—Å —Å—Ü–µ–ø–ª–µ–Ω–∏—è! –°–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–ª–∏–∫–∏ —Å–Ω–∏–∂–µ–Ω—ã.");
    updateUI();
    saveProgress();
  }
}

function addScore() {
  score += perClick;
  checkWear();
  updateUI();
  saveProgress();
}

clickBtn.addEventListener('click', addScore);

upgrade1Btn.addEventListener('click', () => {
  if (score >= 10) {
    score -= 10;
    perSecond += 5;
    updateUI();
    saveProgress();
  }
});

upgrade2Btn.addEventListener('click', () => {
  if (score >= 50) {
    score -= 50;
    perClick += 2;
    updateUI();
    saveProgress();
  }
});

upgrade3Btn.addEventListener('click', () => {
  if (score >= 200) {
    score -= 200;
    perSecond += 20;
    updateUI();
    saveProgress();
  }
});

fixClutchBtn.addEventListener('click', () => {
  if (score >= 100) {
    score -= 100;
    perClick += 1;
    perSecond += 3;
    showNotification("‚úÖ –°—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ!");
    updateUI();
    saveProgress();
  }
});

addCoolantBtn.addEventListener('click', () => {
  if (score >= 150) {
    score -= 150;
    perClick += 1;
    showNotification("‚úÖ –¢–æ—Å–æ–ª –∑–∞–ª–∏—Ç, –¥–≤–∏–≥–∞—Ç–µ–ª—å –æ—Ö–ª–∞–∂–¥–∞–µ—Ç—Å—è!");
    updateUI();
    saveProgress();
  }
});

tuneJetsBtn.addEventListener('click', () => {
  if (score >= 200) {
    score -= 200;
    perSecond += 10;
    showNotification("‚úÖ –ñ–∏–∫–ª—ë—Ä—ã –ø–æ–¥–∫—Ä—É—á–µ–Ω—ã, –º–æ—â–Ω–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞!");
    updateUI();
    saveProgress();
  }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –æ—á–∫–æ–≤ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
setInterval(() => {
  score += perSecond / 10;
  updateUI();
  saveProgress();
}, 1000);

// –í–∫–ª–∞–¥–∫–∏
const tabs = document.querySelectorAll('.tab-btn');
const contents = document.querySelectorAll('.tab-content');

function activateTab(tabName) {
  contents.forEach(c => {
    c.classList.toggle('active', c.id === tabName);
  });
}

tabs.forEach(tab => {
  tab.addEventListener('click', () => {
    activateTab(tab.dataset.tab);
    if(tab.dataset.tab === 'leaders') {
      renderLeaderboard();
    }
  });
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function renderLeaderboard() {
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—ã")
  const playerName = '–í—ã';
  const playerScore = Math.floor(score);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  const existingIndex = leaderboard.findIndex(p => p.name === playerName);
  if(existingIndex >= 0) {
    if(playerScore > leaderboard[existingIndex].score) {
      leaderboard[existingIndex].score = playerScore;
    }
  } else {
    leaderboard.push({name: playerName, score: playerScore});
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø 10
  leaderboard.sort((a,b) => b.score - a.score);
  if(leaderboard.length > 10) leaderboard = leaderboard.slice(0,10);

  let health = parseFloat(localStorage.getItem('health')) || 100;
let distanceSinceLastHealthDrop = 0;

const healthValue = document.getElementById('healthValue');
const healthBar = document.getElementById('healthBar');
const healthText = document.getElementById('healthText');
  
  // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
  leaderList.innerHTML = '';
  leaderboard.forEach((player, i) => {
    let medal = '';
    switch(i){
      case 0: medal = 'ü•á'; break;
      case 1: medal = 'ü•à'; break;
      case 2: medal = 'ü•â'; break;
      default: medal = 'üöó'; break;
    }
    const li = document.createElement('li');
    li.textContent = `${medal} ${player.name} ‚Äî ${player.score} –∫–º`;
    leaderList.appendChild(li);
  });

  function updateUI() {
  scoreElement.textContent = Math.floor(score);
  perSecondElement.textContent = perSecond;
  coinsDisplay.textContent = coins;

  const progress = (clicksCount % GAME_BALANCE.coinsInterval) / GAME_BALANCE.coinsInterval * 100;
  const remaining = GAME_BALANCE.coinsInterval - (clicksCount % GAME_BALANCE.coinsInterval);
  coinProgress.style.width = `${progress}%`;
  progressText.textContent = `${GAME_BALANCE.coinsInterval - remaining}/${GAME_BALANCE.coinsInterval}`;

    function clickHandler() {
  if (health <= 0) return;

  score += perClick;
  clicksCount++;
  distanceSinceLastHealthDrop += perClick;

  // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 100 –∫–º
  if (distanceSinceLastHealthDrop >= 100) {
    const drops = Math.floor(distanceSinceLastHealthDrop / 100);
    health = Math.max(0, health - drops);
    distanceSinceLastHealthDrop %= 100;
  }

  if (clicksCount % GAME_BALANCE.coinsInterval === 0) {
    coins++;
    showNotification('üéâ –ü–æ–ª—É—á–µ–Ω–∞ –±–æ–Ω—É—Å–Ω–∞—è –º–æ–Ω–µ—Ç–∞!');
  }

  updateUI();
  saveGame();

  clickBtn.classList.remove('jump');
  void clickBtn.offsetWidth;
  clickBtn.classList.add('jump');
}
    
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–¥–æ—Ä–æ–≤—å—è
  healthValue.textContent = `${Math.floor(health)}%`;
  healthBar.style.width = `${health}%`;
  healthText.textContent = `${Math.floor(health)}%`;
  healthBar.style.background = health > 50 
    ? 'linear-gradient(90deg, #00cc66, #009933)' 
    : (health > 20 
      ? 'linear-gradient(90deg, #ffcc00, #ffaa00)' 
      : 'linear-gradient(90deg, #ff4444, #cc0000)');

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ 0% –∑–¥–æ—Ä–æ–≤—å—è
  clickBtn.style.opacity = health <= 0 ? 0.5 : 1;
  clickBtn.style.pointerEvents = health <= 0 ? 'none' : 'auto';

  // –£–ª—É—á—à–µ–Ω–∏—è –∏ —Ä–µ–º–æ–Ω—Ç
  upgrade1Btn.disabled = score < 25;
  upgrade2Btn.disabled = score < 120;
  upgrade3Btn.disabled = score < 500;

  fixClutchBtn.disabled = score < 250;
  addCoolantBtn.disabled = score < 400;
  tuneJetsBtn.disabled = score < 600;
}
  saveProgress();
}

updateUI();
